#version: '3.8'
#  ----SERVICES----
#services:
# ----MySQL----
#  mysql-db:
#    image: mysql:8.0
#    command: --default-authentication-plugin=mysql_native_password
#    restart: always
#    environment:
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#      MYSQL_DATABASE: ${MYSQL_DATABASE}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#    ports:
#      - "3306:3306"
# ----PostgreSQL----
#    postgre-db:
#      image: postgres
#      restart: always
#      container_name: "kafka-example-db"
#      ports:
#        - "5432:5432"
#      environment:
#        POSTGRES_PASSWORD: example
#        POSTGRES_USER: example
#        POSTGRES_DB: kafka_example
# ----Elasticsearh----
#  elasticsearch:
#    image: elasticsearch:8.8.0
#    environment:
#      - discovery.type=single-node
#      - validate_after_inactivity=0
#      - max_open_files=65536
#      - max_content_length_in_bytes=100000000
#      - transport.host=elasticsearch
#      - xpack.security.enabled=false
#    volumes:
#      - $HOME/app:/var/app        // Volumes -> verileri kaydeder.
#    networks:
#      - elk
#    ports:
#      - "9200:9200"
#      - "9300:9300"
#
#  kibana:
#    container_name: library_kibana
#    image: docker.elastic.co/kibana/kibana:7.15.2
#    ports:
#      - "5601:5601"
#    networks:
#      - elk
#    depends_on:
#      - elasticsearch
#
#  logstash:
#    container_name: library_logstash
#    image: docker.elastic.co/logstash/logstash:7.15.2
#    volumes:
#      - type: bind
#        source: .logstash
#        target: /usr/share/logstash/pipeline
#        read_only: true
#    ports:
#      - "5044:5044"
#      - "5000:5000/tcp"
#      - "5000:5000/udp"
#      - "9600:9600"
#      - "4560:4560"
#    environment:
#      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
#    networks:
#      - elk
#    depends_on:
#      - elasticsearch
#networks:
#    elk:



#app:
#  image: 'Uygulama adÄ±'
#  build:
#    context: .
#  container_name: app
#  depends_on:
#    - db
#  environment:
#    - POSTGRES_USER=$YOUR_USERNAME
#    - POSTGRES_PASSWORD=$YOUR_PASSWORD
#    - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/$YOUR_DB_NAME
#    - SPRING_DATASOURCE_USERNAME=$YOUR_USERNAME
#    - SPRING_DATASOURCE_PASSWORD=$YOUR_PASSWORD
#    - SPRING_JPA_HIBERNATE_DDL_AUTO=update
#
#  ports:
#    - "6868:8080"
#
#  db:
#    image: postgres
#    container_name: db
#    environment:
#      - POSTGRES_USER=$YOUR_USERNAME
#      - POSTGRES_PASSWORD=$YOUR_PASSWORD
#      - POSTGRES_DB=$YOUR_DB_NAME
#    ports:
#      - "5433:5432"


# MONGODB

#     mongodb:
#       image: mongo
#       container_name: mongodb
#       ports:
#         - 27017:27017
#       volumes:
#         - data:/data
#       environment:
#         - MONGO_INITDB_ROOT_USERNAME=rootuser
#         - MONGO_INITDB_ROOT_PASSWORD=rootpass

#     mongo-express:
#       image: mongo-express
#       container_name: mongo-express
#       restart: always
#       ports:
#         - 8081:8081
#       environment:
#         - ME_CONFIG_MONGODB_ADMINUSERNAME=rootuser
#         - ME_CONFIG_MONGODB_ADMINPASSWORD=rootpass
#         - ME_CONFIG_MONGODB_SERVER=mongodb

# volumes:
#   data: {}

# networks:
#   defaults:
#     name: mongodb_network

#  KAFKA


  # # Kafka hizmeti, Kafka sunucusunu baslatir.
  # kafka:
  #   image: confluentinc/cp-kafka:latest
  #   container_name: kafka-broker
  #   depends_on:
  #     - zookeeper  # Kafka'nin calisabilmesi icin ZooKeeper hizmetine baglidir.
  #   ports:
  #     - 59092:59092  # Kafka'ya disaridan erisim saglar.
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181  # Kafka'nin ZooKeeper ile iletisim kurmasini saglar.
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:59092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  # Offset konularinin cogaltma faktorunu ayarlar.


  #   # ZooKeeper hizmeti, Kafka icin koordinasyon ve konfigurasyon depolama saglar.
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:latest
  #   container_name: zookeeper
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #     ZK_SERVER_HEAP: "-Xmx256M -Xms256M"  # ZooKeeper'in bellek yapilandirmalarini belirler.
  #   ports:
  #     - 52181:2181  # ZooKeeper'a disaridan erisim saglar.

  #    # Kafka Connect hizmeti, Kafka veri akislarini kaydetmek ve islemek icin kullanilir.
  #  kafka_connect:
  #      container_name: kafka_connect
  #      image: debezium/connect
  #      links:
  #        - db
  #         - kafka
  #      ports:
  #        - '8083:8083'  # Kafka Connect REST API'ya disaridan erisim saglar.
  #      environment:
  #        - BOOTSTRAP_SERVERS=kafka:9092  # Kafka sunucusuna baglanma ayarlarini tanimlar.
  #        - GROUP_ID=medium_debezium
  #        - CONFIG_STORAGE_TOPIC=my_connect_configs
  #         - OFFSET_STORAGE_TOPIC=my_connect_offsets
  #         - STATUS_STORAGE_TOPIC=my_connect_statuses

  # kafka-ui:
  #   container_name: kafka-ui
  #   image: provectuslabs/kafka-ui:latest
  #   ports:
  #     - "9091:8080"  # Kafka UI'ya disaridan erisim saglar.
  #   restart: always
  #   depends_on:
  #     - kafka
  #     - zookeeper
  #   environment:
  #     - KAFKA_CLUSTERS_0_NAME=local
  #     - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
  #     - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

#  # Adminer hizmeti, veritabani yonetim arayuzu saglar.
#  adminer:
#    image: adminer
#    restart: always
#    ports:
#      - 8001:8080  # Adminer'a disaridan erisim saglar.


  # zipkin:
  #   image: openzipkin/zipkin
  #   container_name: zipkin
  #   ports:
  #     - "9411:9411"
